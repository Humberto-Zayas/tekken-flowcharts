<template>
  <div>
    <!-- <b-breadcrumb :items="items"></b-breadcrumb> -->
    <b-container class="bv-example-row">
      <br />
      <b-row>
        <b-col class="">
          <h1>
            <!-- {{ xcharacters[1].id }} -->
            {{ currentCharacter.id }}
          </h1>
        </b-col>
      </b-row>
      <b-row>
        <b-col v-for="n in x" :key="n" class="flowchart-col" cols="2">
          <template>
            <div>
              <b-form-select
                v-model="selected[n]"
                :options="xcharacters[0].moves"
                text-field="Move"
              >
              </b-form-select>
              <div class="mt-3">
                Selected: <strong>{{ selected[n] }}</strong>
              </div>
            </div>
          </template>
        </b-col>
        <span class="addFlowChart" @click="x += 1">&#43;</span>
      </b-row>

      <br />
      <!-- List of all moves as a list group -->
      <!-- <b-row align-v="start">
        <b-col>
          <b-list-group>
            <b-list-group-item
              v-for="move in currentCharacter.moves"
              :key="move.Move"
              class="d-flex justify-content-between align-items-center"
            >
              <nuxt-link
                :to="'/zafina/' + move.Move.toLowerCase().replace(/ /g, '-')"
                >{{ move.Move }}</nuxt-link
              >

              <b-badge variant="primary" pill>14</b-badge>
            </b-list-group-item>
          </b-list-group>
        </b-col>
      </b-row> -->
      <!-- List of all moves as a list group -->
      
      <b-table
        sticky-header="60vh"
        bordered
        striped
        hover
        :items="xcharacters[0].moves"
        :fields="fields"
      >
        <!-- <template v-slot:cell(Level)="data">
          <nuxt-link to="/">{{ data.value }} hee</nuxt-link>
        </template> -->
        <template v-slot:cell(actions)="row">
        <b-button size="sm" @click="info(row.item, row.index, $event.target)" class="mr-1">
          Info modal
        </b-button>
        <b-button size="sm" @click="row.toggleDetails">
          {{ row.detailsShowing ? 'Hide' : 'Show' }} Details
        </b-button>
      </template>
      </b-table>

      <!-- Input Form for Strapi No Auth -->
      <div>
        <b-form v-if="show" @submit="addFlowChart" @reset="onReset">
          <b-form-group
            id="input-group-2"
            label="Move Name:"
            label-for="input-2"
          >
            <b-form-input
              id="input-2"
              v-model="form.name"
              required
              placeholder="Move Name"
            ></b-form-input>
          </b-form-group>
          <b-form-textarea
            id="textarea"
            v-model="form.content"
            placeholder="Enter something..."
            rows="3"
            max-rows="6"
          ></b-form-textarea>

          <br />
          <b-button type="submit" variant="primary">Submit</b-button>
          <b-button type="reset" variant="danger">Reset</b-button>
        </b-form>
        <b-card class="mt-3" header="Form Data Result">
          <pre class="m-0">{{ form }}</pre>
        </b-card>
      </div>
      <!-- Input Form for Strapi No Auth End -->
    </b-container>
  </div>
</template>

<style scoped>
.addFlowChart {
  height: 30px;
  width: 30px;
  top: 25px;
  position: relative;
  text-align: center;
  background: #29d129;
  color: white;
  border-radius: 100%;
  padding: 0;
  font-weight: bolder;
  cursor: pointer;
  font-size: 22px;
  line-height: 27px;
  box-shadow: 0 4px 8px -5px black;
  transition: transform 0.2s;
}

.addFlowChart:hover {
  transform: scale(1.1);
}

.flowchart-col {
  padding: 20px 30px;
  position: relative;
}

.flowchart-col:after {
  top: 37px;
  width: 31px;
  height: 6px;
  content: '';
  background: black;
  position: absolute;
  right: 0px;
}
.flowchart-col:not(:first-child):before {
  top: 37px;
  width: 31px;
  height: 6px;
  content: '';
  background: black;
  position: absolute;
  left: 0px;
}
.flowchart-col:last-child:after {
  top: 37px;
  width: 0 !important;
  height: 0;
  content: '';
  background: black;
  position: absolute;
  right: 0px;
}
</style>

<script>
import axios from 'axios'
const apiUrl = process.env.API_URL || 'http://localhost:1339'
export default {
  data() {
    return {
      punish: true,
      x: 1,
      selected: [],
      form: {
        name: '',
        content: ''

        // food: null,
        // checked: []
      },
      show: true,
      id: this.$route.params.id,
    }
  },
  computed: {
    currentCharacter() {
      return this.xcharacters[0]
    },
    matchingFlowCharts() {
      const flowcharts = this.flowcharts

      // for each array item in flow charts
      // array item.name matches the slug
      // push all array item to matching charts

      return flowcharts.filter(function(chart) {
        return chart.Name.toLowerCase().replace(/ /g, '-') === this.id
      })

      // return flowcharts[0].Name.toLowerCase().replace(/ /g, '-')
      // return x
      // return flowcharts
    }
  },
  methods: {
    pushMove(event) {
      this.$router.push('/' + event.target.value)
    },
    onSubmit(evt) {
      evt.preventDefault()
      alert(JSON.stringify(this.form))
    },
    onReset(evt) {
      evt.preventDefault()
      // Reset our form values
      this.form.email = ''
      this.form.name = ''
      this.form.food = null
      this.form.checked = []
      // Trick to reset/clear native browser form validation state
      this.show = false
      this.$nextTick(() => {
        this.show = true
      })
    },
    addFlowChart(evt) {
      evt.preventDefault()
      axios
        .post(`${apiUrl}/flowcharts/`, {
          Name: this.form.name,
          Content: this.form.content
        })
        .then((response) => {
          // Handle success.
          alert('Success')
          // console.log('Well done!')
          // console.log('User profile', response.data.user)
          // console.log('User token', response.data.jwt)
        })
        .catch((error) => {
          // Handle error.
          alert('Error: ', error)
          // console.log('An error occurred:', error)
        })
    }
  }
}
</script>
